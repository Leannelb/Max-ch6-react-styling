{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useReducer } from \"react\";\nconst initalInputState = {\n  value: '',\n  isTouched: false\n};\n\nconst inputStateReducer = (state, action) => {\n  if (action.type === 'INPUT') {\n    return {\n      value: action.value,\n      isTouched: state.isTouched\n    };\n  }\n\n  if (action.type === 'BLUR') {\n    return {\n      isTouched: true,\n      value: state.value\n    };\n  }\n\n  if (action.type === 'RESET') {\n    return {};\n  }\n\n  return initalInputState;\n};\n\nconst useInput = validateValue => {\n  _s();\n\n  const [inputState, dispatch] = useReducer(inputStateReducer, initalInputState);\n  const valueIsValid = validateValue(inputState.value);\n  const hasError = !valueIsValid && inputState.isTouched;\n\n  const valueChangeHandler = event => {\n    dispatch({\n      type: 'INPUT',\n      value: event.target.value\n    });\n  };\n\n  const inputBlurHandler = event => {\n    dispatch({\n      type: 'DISPATCH'\n    });\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    dispatch({\n      type: 'RESET'\n    });\n  };\n\n  return {\n    value: inputState.value,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"HKXUMThEYJkTKITRZelASdrm1zk=\");\n\nexport default useInput;","map":{"version":3,"sources":["C:/Users/LillyCode/Documents/Youtube/Max-100days/16/code/01-starting-project/src/hooks/use-input.js"],"names":["useState","useReducer","initalInputState","value","isTouched","inputStateReducer","state","action","type","useInput","validateValue","inputState","dispatch","valueIsValid","hasError","valueChangeHandler","event","target","inputBlurHandler","setIsTouched","reset","isValid"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AAEA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAE,EADc;AAErBC,EAAAA,SAAS,EAAE;AAFU,CAAzB;;AAIA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzC,MAAGA,MAAM,CAACC,IAAP,KAAgB,OAAnB,EAA2B;AACvB,WAAM;AAAEL,MAAAA,KAAK,EAAEI,MAAM,CAACJ,KAAhB;AAAuBC,MAAAA,SAAS,EAAEE,KAAK,CAACF;AAAxC,KAAN;AACH;;AACD,MAAGG,MAAM,CAACC,IAAP,KAAgB,MAAnB,EAA0B;AACtB,WAAO;AAAEJ,MAAAA,SAAS,EAAE,IAAb;AAAmBD,MAAAA,KAAK,EAAEG,KAAK,CAACH;AAAhC,KAAP;AACH;;AACD,MAAGI,MAAM,CAACC,IAAP,KAAgB,OAAnB,EAA2B;AACvB,WAAO,EAAP;AACH;;AACD,SAAON,gBAAP;AACH,CAXD;;AAaA,MAAMO,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAChC,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBX,UAAU,CAACI,iBAAD,EAAoBH,gBAApB,CAAzC;AAEA,QAAMW,YAAY,GAAGH,aAAa,CAACC,UAAU,CAACR,KAAZ,CAAlC;AACA,QAAMW,QAAQ,GAAG,CAACD,YAAD,IAAiBF,UAAU,CAACP,SAA7C;;AAEA,QAAMW,kBAAkB,GAAGC,KAAK,IAAI;AAChCJ,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE,OAAR;AAAiBL,MAAAA,KAAK,EAAEa,KAAK,CAACC,MAAN,CAAad;AAArC,KAAD,CAAR;AACH,GAFD;;AAIA,QAAMe,gBAAgB,GAAGF,KAAK,IAAI;AAC9BJ,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAW,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAHD;;AAKA,QAAMC,KAAK,GAAG,MAAM;AAChBR,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACH,GAFD;;AAIA,SAAO;AACHL,IAAAA,KAAK,EAAEQ,UAAU,CAACR,KADf;AAEHkB,IAAAA,OAAO,EAAER,YAFN;AAGHC,IAAAA,QAHG;AAIHC,IAAAA,kBAJG;AAKHG,IAAAA,gBALG;AAMHE,IAAAA;AANG,GAAP;AAQH,CA3BD;;GAAMX,Q;;AA6BN,eAAeA,QAAf","sourcesContent":["import { useState, useReducer } from \"react\";\r\n\r\nconst initalInputState = {\r\n    value: '',\r\n    isTouched: false\r\n}\r\nconst inputStateReducer = (state, action) => {\r\n    if(action.type === 'INPUT'){\r\n        return{ value: action.value, isTouched: state.isTouched}\r\n    }\r\n    if(action.type === 'BLUR'){\r\n        return { isTouched: true, value: state.value }\r\n    }\r\n    if(action.type === 'RESET'){\r\n        return { }\r\n    }\r\n    return initalInputState;\r\n}\r\n\r\nconst useInput = (validateValue) => {\r\n    const [inputState, dispatch] = useReducer(inputStateReducer, initalInputState)\r\n\r\n    const valueIsValid = validateValue(inputState.value);\r\n    const hasError = !valueIsValid && inputState.isTouched;\r\n\r\n    const valueChangeHandler = event => {\r\n        dispatch({ type: 'INPUT', value: event.target.value })\r\n    };\r\n\r\n    const inputBlurHandler = event => {\r\n        dispatch({ type: 'DISPATCH', })\r\n        setIsTouched(true);\r\n    }\r\n\r\n    const reset = () => {\r\n        dispatch({ type: 'RESET' })\r\n    }\r\n\r\n    return {\r\n        value: inputState.value,\r\n        isValid: valueIsValid,\r\n        hasError,\r\n        valueChangeHandler,\r\n        inputBlurHandler,\r\n        reset\r\n    }\r\n}\r\n\r\nexport default useInput;\r\n\r\n"]},"metadata":{},"sourceType":"module"}